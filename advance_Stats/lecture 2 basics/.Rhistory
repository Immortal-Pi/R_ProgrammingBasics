xtotal <- model.matrix(~ 0 + BEDROOMS + REMODEL, data = housing.df)
xtotal
levels(housing.df$BEDROOMS)
unique_col=data.frame(BEDROOMS = factor(c(1,2,3,4,5,6,7,8,9),levels =c(1,2,3,4,5,6,7,8,9) ))
levels(housing.df$BEDROOMS)
#### Figure 3.1
Amtrak.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/Amtrak data.csv")
# use time series analysis
library(forecast)
ridership.ts <- ts(Amtrak.df$Ridership, start = c(1991, 1), end = c(2004, 3), freq = 12)
plot(ridership.ts, xlab = "Year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
## Boston housing data
#getwd()
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/BostonHousing.csv")
#### Table 3.2
head(housing.df, 9)
View(housing.df)
## barchart of CHAS vs. mean MEDV
# compute mean MEDV per CHAS = (0, 1)
data.for.plot <- aggregate(housing.df$MEDV, by = list(housing.df$CHAS), FUN = mean)
data.for.plot
names(data.for.plot) <- c("CHAS", "MeanMEDV")
data.for.plot
barplot(data.for.plot$MeanMEDV,  names.arg = data.for.plot$CHAS,
xlab = "CHAS", ylab = "Avg. MEDV")
# alternative plot with ggplot
#  The stat = "identity" argument is used because you want to create a bar plot
# with the actual values from the dataset, rather than computing counts or proportions.
library(ggplot2)
ggplot(data.for.plot) + geom_bar(aes(x = CHAS, y = MeanMEDV), stat = "identity")
## scatter plot with axes names
plot(housing.df$MEDV ~ housing.df$LSTAT, xlab = "MDEV", ylab = "LSTAT")
# alternative plot with ggplot
library(ggplot2)
ggplot(housing.df) + geom_point(aes(x = LSTAT, y = MEDV), colour = "red", alpha = 0.5)
## barchart of CHAS vs. % CAT.MEDV
data.for.plot <- aggregate(housing.df$CAT..MEDV, by = list(housing.df$CHAS), FUN = mean)
names(data.for.plot) <- c("CHAS", "MeanCATMEDV")
barplot(data.for.plot$MeanCATMEDV * 100,  names.arg = data.for.plot$CHAS,
xlab = "CHAS", ylab = "% of CAT.MEDV")
## histogram of MEDV
hist(housing.df$MEDV, xlab = "MEDV") # breaks is 10 by default
# alternative plot with ggplot
library(ggplot2)
ggplot(housing.df) + geom_histogram(aes(x = MEDV), binwidth = 5)
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV ~ housing.df$CHAS, xlab = "CHAS", ylab = "MEDV")
# alternative plot with ggplot
ggplot(housing.df) + geom_boxplot(aes(x = as.factor(CHAS), y = MEDV)) + xlab("CHAS")
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
levels(housing.df$BEDROOMS)<-unique(housing.df$BEDROOMS)
str(housing1.df)
str(housing.df)
xtotal <- model.matrix(~ 0 + BEDROOMS + REMODEL, data = housing.df)
xtotal
xtotal <- model.matrix(~ 0 + BEDROOMS , data = housing.df)
xtotal
xtotal
xtotal
str(housing.df)
FLOOR
xtotal <- model.matrix(~ 0 + floors , data = housing.df)
xtotal
str(housing.df)
levels(housing.df$FLOORS)<-unique(housing.df$FLOORS)
str(housing.df)
xtotal <- model.matrix(~ 0 + floors , data = housing.df)
xtotal
xtotal <- model.matrix(~  + floors , data = housing.df)
xtotal <- model.matrix(~0  + floors , data = housing.df)
xtotal <- model.matrix(~ 0  + floors , data = housing.df)
0
xtotal <- model.matrix(~ 0 + floors , data = housing.df)
# Option 2: use model.matrix() to convert all categorical variables in the data frame into a set of dummy variables.
# We must then turn the resulting data matrix back into a data frame for further work.
housing1.df=read.csv('D:/Education/R programming/R_Projects/Basics/lecture 3/BostonHousing.csv')
unique(housing.df$BEDROOMS)
str(housing.df)
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
str(housing.df)
unique(housing.df$FLOORS)
housing.df$FLOORS=as.integer(housing.df$FLOORS)
unique(housing.df$FLOORS)
levels(housing.df$FLOORS)<-unique(housing.df$FLOORS)
xtotal <- model.matrix(~ 0 + floors , data = housing.df)
xtotal <- model.matrix(~ 0 + FLOORS , data = housing.df)
xtotal
str(housing.df)
xtotal <- model.matrix(~ 0 FLOORS , data = housing.df)
xtotal <- model.matrix(~ FLOORS , data = housing.df)
xtotal
(housing.df$FLOORS)<-data.frame(Categories = unique(housing.df$FLOORS), values=housing.df$FLOORS)
housing.df$FLOORS<-data.frame(Categories = unique(housing.df$FLOORS), values=housing.df$FLOORS)
xtotal <- model.matrix(~ FLOORS , data = housing.df)
xtotal
xtotal <- model.matrix(~ FLOORS , data = housing.df)
class(housing.df$FLOORS)
df<-data.frame(Categories = unique(housing.df$FLOORS), values=housing.df$FLOORS)
xtotal <- model.matrix(~ FLOORS , data = housing.df)
xtotal <- model.matrix(~ FLOORS , data = df)
df<-data.frame(Categories = unique(housing.df$FLOORS), values=housing.df$FLOORS)
class(housing.df$FLOORS)
str(housing.df)
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
str(housing.df)
housing.df$FLOORS=factor(housing.df$FLOORS,levels = unique(housing.df))
xtotal
xtotal <- model.matrix(~ FLOORS , data = housing.df)
xtotal
xtotal <- model.matrix(~ 0+ FLOORS , data = housing.df)
xtotal
str(housing.df)
housing.df$ROOMS=factor(housing.df$ROOMS,levels = unique(housing.df))
xtotal <- model.matrix(~ 0+ ROOMS , data = housing.df)
xtotal
#### Figure 3.1
Amtrak.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/Amtrak data.csv")
# use time series analysis
library(forecast)
ridership.ts <- ts(Amtrak.df$Ridership, start = c(1991, 1), end = c(2004, 3), freq = 12)
plot(ridership.ts, xlab = "Year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
## Boston housing data
#getwd()
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/BostonHousing.csv")
#### Table 3.2
head(housing.df, 9)
View(housing.df)
## barchart of CHAS vs. mean MEDV
# compute mean MEDV per CHAS = (0, 1)
data.for.plot <- aggregate(housing.df$MEDV, by = list(housing.df$CHAS), FUN = mean)
data.for.plot
names(data.for.plot) <- c("CHAS", "MeanMEDV")
data.for.plot
barplot(data.for.plot$MeanMEDV,  names.arg = data.for.plot$CHAS,
xlab = "CHAS", ylab = "Avg. MEDV")
# alternative plot with ggplot
#  The stat = "identity" argument is used because you want to create a bar plot
# with the actual values from the dataset, rather than computing counts or proportions.
library(ggplot2)
ggplot(data.for.plot) + geom_bar(aes(x = CHAS, y = MeanMEDV), stat = "identity")
## scatter plot with axes names
plot(housing.df$MEDV ~ housing.df$LSTAT, xlab = "MDEV", ylab = "LSTAT")
# alternative plot with ggplot
library(ggplot2)
ggplot(housing.df) + geom_point(aes(x = LSTAT, y = MEDV), colour = "red", alpha = 0.5)
## barchart of CHAS vs. % CAT.MEDV
data.for.plot <- aggregate(housing.df$CAT..MEDV, by = list(housing.df$CHAS), FUN = mean)
names(data.for.plot) <- c("CHAS", "MeanCATMEDV")
barplot(data.for.plot$MeanCATMEDV * 100,  names.arg = data.for.plot$CHAS,
xlab = "CHAS", ylab = "% of CAT.MEDV")
## histogram of MEDV
hist(housing.df$MEDV, xlab = "MEDV") # breaks is 10 by default
# alternative plot with ggplot
library(ggplot2)
ggplot(housing.df) + geom_histogram(aes(x = MEDV), binwidth = 5)
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV ~ housing.df$CHAS, xlab = "CHAS", ylab = "MEDV")
# alternative plot with ggplot
ggplot(housing.df) + geom_boxplot(aes(x = as.factor(CHAS), y = MEDV)) + xlab("CHAS")
## side-by-side boxplots
# use par() to split the plots into panels.
par(mfcol = c(1, 4))
boxplot(housing.df$NOX ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "NOX")
boxplot(housing.df$LSTAT ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "LSTAT")
boxplot(housing.df$PTRATIO ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "PTRATIO")
boxplot(housing.df$INDUS ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "INDUS")
#### Figure 3.4
## simple heatmap of correlations (without values)
heatmap(cor(housing.df), Rowv = NA, Colv = NA)
## heatmap with values
library(gplots)
heatmap.2(cor(housing.df), Rowv = FALSE, Colv = FALSE, dendrogram = "none",
cellnote = round(cor(housing.df),2),
notecol = "black", key = FALSE, trace = 'none', margins = c(10,10))
library(ggplot2)
library(reshape) # to generate input for the plot
cor.mat <- round(cor(housing.df),2) # rounded correlation matrix
melted.cor.mat <- melt(cor.mat)
ggplot(melted.cor.mat, aes(x = X1, y = X2, fill = value)) +
geom_tile() +
geom_text(aes(x = X1, y = X2, label = value))
# replace dataFrame with your data.
# is.na() returns a Boolean (TRUE/FALSE) output indicating the location of missing
# values.
# multiplying the Boolean value by 1 converts the output into binary (0/1).
heatmap(1 * is.na(dataFrame), Rowv = NA, Colv = NA)
## color plot
par(mfcol = c(1,1), xpd=TRUE) # allow legend to be displayed outside of plot area
plot(housing.df$NOX ~ housing.df$LSTAT, ylab = "NOX", xlab = "LSTAT",
col = ifelse(housing.df$CAT..MEDV == 1, "black", "gray"))
plot(housing.df$NOX ~ housing.df$LSTAT, ylab = "NOX", xlab = "LSTAT",
col = ifelse(housing.df$CAT..MEDV == 1, "black", "gray"))
# add legend outside of plotting area
# In legend() use argument inset =  to control the location of the legend relative
# to the plot.
legend("topleft", inset=c(0, -0.1),
legend = c("CAT.MEDV = 1", "CAT.MEDV = 0"), col = c("black", "gray"),
pch = 1, cex = 0.5)
# alternative plot with ggplot
library(ggplot2)
ggplot(housing.df, aes(y = NOX, x = LSTAT, colour= CAT..MEDV)) +
geom_point(alpha = 0.6)
## simple plot
# use plot() to generate a matrix of 4X4 panels with variable name on the diagonal,
# and scatter plots in the remaining panels.
plot(housing.df[, c(1, 3, 12, 13)])
# alternative, nicer plot (displayed)
library(GGally)
# alternative plot with ggplot
ggplot(data.for.plot) +
geom_bar(aes(x = as.factor(RAD), y = `meanMEDV`), stat = "identity") +
xlab("RAD") + facet_grid(CHAS ~ .)
# add legend outside of plotting area
# In legend() use argument inset =  to control the location of the legend relative
# to the plot.
legend("topleft", inset=c(0, -0.1),
legend = c("CAT.MEDV = 1", "CAT.MEDV = 0"), col = c("black", "gray"),
pch = 1, cex = 0.5)
# alternative plot with ggplot
library(ggplot2)
ggplot(housing.df, aes(y = NOX, x = LSTAT, colour= CAT..MEDV)) +
geom_point(alpha = 0.6)
## panel plots
# compute mean MEDV per RAD and CHAS
# In aggregate() use argument drop = FALSE to include all combinations
# (exiting and missing) of RAD X CHAS.
data.for.plot <- aggregate(housing.df$MEDV, by = list(housing.df$RAD, housing.df$CHAS),
FUN = mean, drop = FALSE)
names(data.for.plot) <- c("RAD", "CHAS", "meanMEDV")
# plot the data
par(mfcol = c(2,1))
barplot(height = data.for.plot$meanMEDV[data.for.plot$CHAS == 0],
names.arg = data.for.plot$RAD[data.for.plot$CHAS == 0],
xlab = "RAD", ylab = "Avg. MEDV", main = "CHAS = 0")
barplot(height = data.for.plot$meanMEDV[data.for.plot$CHAS == 1],
names.arg = data.for.plot$RAD[data.for.plot$CHAS == 1],
xlab = "RAD", ylab = "Avg. MEDV", main = "CHAS = 1")
## panel plots
# compute mean MEDV per RAD and CHAS
# In aggregate() use argument drop = FALSE to include all combinations
# (exiting and missing) of RAD X CHAS.
data.for.plot <- aggregate(housing.df$MEDV, by = list(housing.df$RAD, housing.df$CHAS),
FUN = mean, drop = FALSE)
names(data.for.plot) <- c("RAD", "CHAS", "meanMEDV")
# plot the data
par(mfcol = c(2,1))
barplot(height = data.for.plot$meanMEDV[data.for.plot$CHAS == 0],
names.arg = data.for.plot$RAD[data.for.plot$CHAS == 0],
xlab = "RAD", ylab = "Avg. MEDV", main = "CHAS = 0")
barplot(height = data.for.plot$meanMEDV[data.for.plot$CHAS == 1],
names.arg = data.for.plot$RAD[data.for.plot$CHAS == 1],
xlab = "RAD", ylab = "Avg. MEDV", main = "CHAS = 1")
# alternative plot with ggplot
ggplot(data.for.plot) +
geom_bar(aes(x = as.factor(RAD), y = `meanMEDV`), stat = "identity") +
xlab("RAD") + facet_grid(CHAS ~ .)
# alternative, nicer plot (displayed)
library(GGally)
ggpairs(housing.df[, c(1, 3, 12, 13)])
options(scipen=999) # avoid scientific notation
## scatter plot: regular and log scale
plot(housing.df$MEDV ~ housing.df$CRIM, xlab = "CRIM", ylab = "MEDV")
# to use logarithmic scale set argument log = to either 'x', 'y', or 'xy'.
plot(housing.df$MEDV ~ housing.df$CRIM,
xlab = "CRIM", ylab = "MEDV", log = 'xy')
# alternative log-scale plot with ggplot
library(ggplot2)
ggplot(housing.df) + geom_point(aes(x = CRIM, y = MEDV)) +
scale_x_log10(breaks = 10^(-2:2),
labels = format(10^(-2:2), scientific = FALSE, drop0trailing = TRUE)) +
scale_y_log10(breaks = c(5, 10, 20, 40))
ggplot(housing.df) + geom_point(aes(x = CRIM, y = MEDV)) +
scale_x_log10(breaks = 10^(-2:2),
labels = format(10^(-2:2), scientific = FALSE, drop0trailing = TRUE)) +
scale_y_log10(breaks = c(5, 10, 20, 40))
## boxplot: regular and log scale
boxplot(housing.df$CRIM ~ housing.df$CAT..MEDV,
xlab = "CAT.MEDV", ylab = "CRIM")
boxplot(housing.df$CRIM ~ housing.df$CAT..MEDV,
xlab = "CAT.MEDV", ylab = "CRIM", log = 'y')
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
str(housing.df)
xtotal <- model.matrix(~ ROOMS-1 , data = housing.df)
class(housing.df$FLOORS)
str(housing.df)
housing.df$FLOORS=as.integer(housing.df$FLOORS)
df<-data.frame(Categories = unique(housing.df$FLOORS), values=housing.df$FLOORS)
xtotal <- model.matrix(~ ROOMS-1 , data = housing.df)
class(housing.df$FLOORS)
str(housing.df)
df<-data.frame(Categories = unique(housing.df$FLOORS), values=as.character(housing.df$FLOORS)
class(housing.df$FLOORS)
str(housing.df)
housing.df$ROOMS=factor(housing.df$ROOMS,levels = unique(housing.df))
xtotal
df
housing.df$ROOMS=factor(housing.df$ROOMS)
xtotal <- model.matrix(~ ROOMS-1 , data = housing.df)
xtotal <- model.matrix(~ ROOMS , data = housing.df)
str(housing.df)
housing.df$ROOMS=factor(housing.df$ROOMS,levels = unique(as.character(housing.df$ROOMS)))
xtotal <- model.matrix(~ ROOMS , data = housing.df)
xtotal <- model.matrix(~ +ROOMS , data = housing.df)
housing.df$ROOMS=factor(housing.df$ROOMS,levels = unique(housing.df$ROOMS))
xtotal <- model.matrix(~ +ROOMS , data = housing.df)
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
housing.df$ROOMS=factor(housing.df$ROOMS,levels = unique(housing.df$ROOMS))
xtotal
xtotal <- model.matrix(~ +ROOMS , data = housing.df)
xtotal
xtotal <- model.matrix(~0 +ROOMS , data = housing.df)
xtotal
unique(housing.df$ROOMS)
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
unique(housing.df$ROOMS)
unique(housing.df$FLOORS)
housing.df$FLOORS=factor(housing.df$FLOORS,levels = unique(housing.df$FLOORS))
xtotal <- model.matrix(~0 +FLOORS , data = housing.df)
xtotal
options(scipen=999) # avoid scientific notation
## scatter plot: regular and log scale
plot(housing.df$MEDV ~ housing.df$CRIM, xlab = "CRIM", ylab = "MEDV")
source("C:/Users/26amr/OneDrive - The University of Texas at Dallas/UTD/Fall 2024/Business ANalytics with R/lecture 3/Lecture 3.R")
install.packages(c("GGally", "ggmap", "mosaic", "treemap"))
options(scipen=999) # avoid scientific notation
## scatter plot: regular and log scale
plot(housing.df$MEDV ~ housing.df$CRIM, xlab = "CRIM", ylab = "MEDV")
# to use logarithmic scale set argument log = to either 'x', 'y', or 'xy'.
plot(housing.df$MEDV ~ housing.df$CRIM,
xlab = "CRIM", ylab = "MEDV", log = 'xy')
# alternative log-scale plot with ggplot
library(ggplot2)
ggplot(housing.df) + geom_point(aes(x = CRIM, y = MEDV)) +
scale_x_log10(breaks = 10^(-2:2),
labels = format(10^(-2:2), scientific = FALSE, drop0trailing = TRUE)) +
scale_y_log10(breaks = c(5, 10, 20, 40))
## boxplot: regular and log scale
boxplot(housing.df$CRIM ~ housing.df$CAT..MEDV,
xlab = "CAT.MEDV", ylab = "CRIM")
boxplot(housing.df$CRIM ~ housing.df$CAT..MEDV,
xlab = "CAT.MEDV", ylab = "CRIM", log = 'y')
library(forecast)
Amtrak.df <- read.csv("Lecture 3/Amtrak data.csv")
ridership.ts <- ts(Amtrak.df$Ridership, start = c(1991, 1), end = c(2004, 3), freq = 12)
## fit curve
ridership.lm <- tslm(ridership.ts ~ trend + I(trend^2))
plot(ridership.ts, xlab = "Year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
lines(ridership.lm$fitted, lwd = 2)
# alternative plot with ggplot #But the curve is inverted U.
library(ggplot2)
ggplot(Amtrak.df, aes(y = Ridership, x = Month, group = 12)) +
geom_line() + geom_smooth(formula = y ~ poly(x, 2), method= "lm",
colour = "navy", se = FALSE, na.rm = TRUE)
# Modifying the x axis to be handled appropriately
ggplot(Amtrak.df, aes(y = Ridership, x = as.numeric(time(ridership.ts)))) +
geom_line() +
geom_smooth(formula = y ~ poly(x, 2), method = "lm", colour = "navy", se = FALSE, na.rm = TRUE) +
xlab("Year") + ylab("Ridership (in 000s)")
## zoom in, monthly, and annual plots
ridership.2yrs <- window(ridership.ts, start = c(1991,1), end = c(1992,12))
plot(ridership.2yrs, xlab = "Year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
monthly.ridership.ts <- tapply(ridership.ts, cycle(ridership.ts), mean)
plot(monthly.ridership.ts, xlab = "Month", ylab = "Average Ridership",
ylim = c(1300, 2300), type = "l", xaxt = 'n')
## set x labels
axis(1, at = c(1:12), labels = c("Jan","Feb","Mar", "Apr","May","Jun",
"Jul","Aug","Sep",  "Oct","Nov","Dec"))
annual.ridership.ts <- aggregate(ridership.ts, FUN = mean)
plot(annual.ridership.ts, xlab = "Year", ylab = "Average Ridership",
ylim = c(1300, 2300))
utilities.df <- read.csv("Lecture 3/Utilities.csv")
plot(utilities.df$Fuel_Cost ~ utilities.df$Sales,
xlab = "Sales", ylab = "Fuel Cost", xlim = c(2000, 20000))
text(x = utilities.df$Sales, y = utilities.df$Fuel_Cost,
labels = utilities.df$Company, pos = 4, cex = 0.8, srt = 20, offset = 0.2)
# alternative with ggplot
library(ggplot2)
ggplot(utilities.df, aes(y = Fuel_Cost, x = Sales)) + geom_point() +
geom_text(aes(label = paste(" ", Company)), size = 4, hjust = 0.0, angle = 15) +
ylim(0.25, 2.25) + xlim(3000, 18000)
ggplot(utilities.df, aes(y = Fuel_Cost, x = Sales)) + geom_point() +
geom_text(aes(label = paste(" ", Company)), size = 4, hjust = 0.0, angle = 15) +
ylim(0.25, 2.25) + xlim(3000, 18000)
ggplot(utilities.df, aes(y = Fuel_Cost, x = Sales)) + geom_point() +
geom_text(aes(label = paste(" ", Company)), size = 4, hjust = 0.0, angle = 15) +
ylim(0.25, 2.25) + xlim(3000, 18000)
utilities.df <- read.csv("Lecture 3/Utilities.csv")
utilities.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/Utilities.csv")
plot(utilities.df$Fuel_Cost ~ utilities.df$Sales,
xlab = "Sales", ylab = "Fuel Cost", xlim = c(2000, 20000))
text(x = utilities.df$Sales, y = utilities.df$Fuel_Cost,
labels = utilities.df$Company, pos = 4, cex = 0.8, srt = 20, offset = 0.2)
# alternative with ggplot
library(ggplot2)
ggplot(utilities.df, aes(y = Fuel_Cost, x = Sales)) + geom_point() +
geom_text(aes(label = paste(" ", Company)), size = 4, hjust = 0.0, angle = 15) +
ylim(0.25, 2.25) + xlim(3000, 18000)
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("Lecture 3/UniversalBank.csv")
library(scales)
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("D:/Education/R programming/Lecture 3/UniversalBank.csv")
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("D:/Education/R programming/Lecture 3/UniversalBank.csv")
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("D:/Education/R programming/ecture 3/UniversalBank.csv")
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("D:/Education/R programming/lecture 3/UniversalBank.csv")
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("D:/Education/R programming/R_Projects/Basics/lecture 3/UniversalBank.csv")
library(scales)
plot(jitter(universal.df$CCAvg, 1) ~ jitter(universal.df$Income, 1),
col = alpha(ifelse(universal.df$Securities.Account == 0, "gray", "red"), 0.4),
pch = 20, log = 'xy', ylim = c(0.1, 10),
xlab = "Income", ylab = "CCAvg")
# alternative with ggplot
library(ggplot2)
ggplot(universal.df) +
geom_jitter(aes(x = Income, y = CCAvg, colour = Securities.Account)) +
scale_x_log10(breaks = c(10, 20, 40, 60, 100, 200)) +
scale_y_log10(breaks = c(0.1, 0.2, 0.4, 0.6, 1.0, 2.0, 4.0, 6.0))
plot(utilities.df$Fuel_Cost ~ utilities.df$Sales,
xlab = "Sales", ylab = "Fuel Cost", xlim = c(2000, 20000))
text(x = utilities.df$Sales, y = utilities.df$Fuel_Cost,
labels = utilities.df$Company, pos = 4, cex = 0.8, srt = 20, offset = 0.2)
# alternative with ggplot
library(ggplot2)
ggplot(utilities.df, aes(y = Fuel_Cost, x = Sales)) + geom_point() +
geom_text(aes(label = paste(" ", Company)), size = 4, hjust = 0.0, angle = 15) +
ylim(0.25, 2.25) + xlim(3000, 18000)
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("D:/Education/R programming/R_Projects/Basics/lecture 3/UniversalBank.csv")
library(scales)
plot(jitter(universal.df$CCAvg, 1) ~ jitter(universal.df$Income, 1),
col = alpha(ifelse(universal.df$Securities.Account == 0, "gray", "red"), 0.4),
pch = 20, log = 'xy', ylim = c(0.1, 10),
xlab = "Income", ylab = "CCAvg")
# alternative with ggplot
library(ggplot2)
ggplot(universal.df) +
geom_jitter(aes(x = Income, y = CCAvg, colour = Securities.Account)) +
scale_x_log10(breaks = c(10, 20, 40, 60, 100, 200)) +
scale_y_log10(breaks = c(0.1, 0.2, 0.4, 0.6, 1.0, 2.0, 4.0, 6.0))
# use function alpha() in library scales to add transparent colors
universal.df <- read.csv("D:/Education/R programming/R_Projects/Basics/lecture 3/UniversalBank.csv")
library(scales)
plot(jitter(universal.df$CCAvg, 1) ~ jitter(universal.df$Income, 1),
col = alpha(ifelse(universal.df$Securities.Account == 0, "gray", "red"), 0.4),
pch = 20, log = 'xy', ylim = c(0.1, 10),
xlab = "Income", ylab = "CCAvg")
# alternative with ggplot
library(ggplot2)
ggplot(universal.df) +
geom_jitter(aes(x = Income, y = CCAvg, colour = Securities.Account)) +
scale_x_log10(breaks = c(10, 20, 40, 60, 100, 200)) +
scale_y_log10(breaks = c(0.1, 0.2, 0.4, 0.6, 1.0, 2.0, 4.0, 6.0))
library(MASS)
par(mfcol = c(2,1)) # set graphical parameters
parcoord(housing.df[housing.df$CAT..MEDV == 0, -14], main = "CAT.MEDV = 0")
parcoord(housing.df[housing.df$CAT..MEDV == 1, -14], main = "CAT.MEDV = 1")
#### Figure 3.15
#install Rtools (execute .exe)
#install httpuv
#install xtable
library(treemap)
tree.df <- read.csv("Lecture 3/EbayTreemap.csv")
library(igraph)
library(igraph)
ebay.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/eBayNetwork.csv")
# transform node ids to factors
ebay.df[,1] <- as.factor(ebay.df[,1])
ebay.df[,2] <- as.factor(ebay.df[,2])
graph.edges <- as.matrix(ebay.df[,1:2])
g <- graph.edgelist(graph.edges, directed = FALSE)
isBuyer <- V(g)$name %in% graph.edges[,2]
plot(g, vertex.label = NA, vertex.color = ifelse(isBuyer, "gray", "black"),
vertex.size = ifelse(isBuyer, 7, 10))
#### Figure 3.15
#install Rtools (execute .exe)
#install httpuv
#install xtable
library(treemap)
tree.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/EbayTreemap.csv")
# add column for negative feedback
tree.df$negative.feedback <- 1* (tree.df$Seller.Feedback < 0)
# draw treemap
treemap(tree.df, index = c("Category","Sub.Category", "Brand"),
vSize = "High.Bid", vColor = "negative.feedback", fun.aggregate = "mean",
align.labels = list(c("left", "top"), c("right", "bottom"), c("center", "center")),
palette = rev(gray.colors(3)), type = "manual", title = "")
# need google api key
library(ggmap)
SCstudents <- read.csv("SC-US-students-GPS-data-2016.csv")
Map <- get_map("Denver, CO", zoom = 3)
ggmap(Map) + geom_point(aes(x = longitude, y = latitude), data = SCstudents,
alpha = 0.4, colour = "red", size = 0.5)
SCstudents <- read.csv("D:/Education/R programming/R_Projects/Basics/SC-US-students-GPS-data-2016.csv")
SCstudents <- read.csv("D:/Education/R programming/R_Projects/Basics/lecture 3/SC-US-students-GPS-data-2016.csv")
Map <- get_map("Denver, CO", zoom = 3)
ggmap(Map) + geom_point(aes(x = longitude, y = latitude), data = SCstudents,
alpha = 0.4, colour = "red", size = 0.5)
library(mosaic)
gdp.df <- read.csv("Lecture 3/gdp.csv", skip = 4, stringsAsFactors = FALSE)
names(gdp.df)[5] <- "GDP2015"
gdp.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/gdp.csv", skip = 4, stringsAsFactors = FALSE)
names(gdp.df)[5] <- "GDP2015"
happiness.df <- read.csv("Lecture 3/Veerhoven.csv")
happiness.df <- read.csv("D:/Education/R programming/R_Projects/Basics/Lecture 3/Veerhoven.csv")
# Convert character column to UTF-8 encoding
gdp.df$Country.Name <- iconv(gdp.df$Country.Name, to = "UTF-8")
# gdp map
mWorldMap(gdp.df, key = "Country.Name", fill = "GDP2015") + coord_map()
