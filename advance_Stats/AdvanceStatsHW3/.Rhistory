print('Hello', quote=False)
print('Hello', quote=FALSE)
housing.df <- read.csv("Lecture 2/WestRoxbury.csv", header = TRUE)  # load data
housing.df <- read.csv("Lecture 2/WestRoxbury.csv", header = TRUE)  # load data
housing.df <- read.csv("WestRoxbury.csv", header = TRUE)  # load data
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
dim(housing.df)  # find the dimension of data frame
View(housing.df)  # show all the data in a new tab
# Practice showing different subsets of the data
housing.df[1:10, 1]  # show the first 10 rows of the first column only
# Practice showing different subsets of the data
housing.df[1:10, 1]  # show the first 10 rows of the first column only
housing.df[1:10, ]  # show the first 10 rows of each of the columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df$TOTAL.VALUE  # a different way to show the whole first column
length(housing.df$TOTAL.VALUE)  # find the length of the first column
summary(housing.df)  # find summary statistics for each column
housing.df[]
# random sample of 5 observations
s <- sample(row.names(housing.df), 5)
s
housing.df[s,]
names(housing.df)  # print a list of variables to the screen.
#names(housing.df) retrieves the column names of the housing.df dataframe.
#t(names(housing.df)) transposes the vector of column names, which doesn't change anything since it's already a vector.
#t(t(names(housing.df))) then transposes the transposed vector, which brings it back to the original state.
t(t(names(housing.df)))  # print the list in a useful column format
View(housing.df)  # show all the data in a new tab
dim(housing.df)  # find the dimension of data frame
# Practice showing different subsets of the data
housing.df[1:10, 1]  # show the first 10 rows of the first column only
housing.df[1:10, ]  # show the first 10 rows of each of the columns
housing.df[5, 1:10]  # show the fifth row of the first 10 columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df[, 1]  # show the whole first column
housing.df$TOTAL.VALUE  # a different way to show the whole first column
housing.df$TOTAL.VALUE[1:10]  # show the first 10 rows of the first column
length(housing.df$TOTAL.VALUE)  # find the length of the first column
summary(housing.df)  # find summary statistics for each column
# random sample of 5 observations
s <- sample(row.names(housing.df), 5)
housing.df[s,]
# oversample houses with over 10 rooms
s <- sample(row.names(housing.df), 5, prob = ifelse(housing.df$ROOMS>10, 0.9, 0.01))
names(housing.df)  # print a list of variables to the screen.
#names(housing.df) retrieves the column names of the housing.df dataframe.
#t(names(housing.df)) transposes the vector of column names, which doesn't change anything since it's already a vector.
#t(t(names(housing.df))) then transposes the transposed vector, which brings it back to the original state.
t(t(names(housing.df)))  # print the list in a useful column format
colnames(housing.df)[1] <- c("TOTAL_VALUE")  # change the first column's name
housing.df$REMODEL <- as.factor(housing.df$REMODEL)
class(housing.df[ ,14]) # Same.
levels(housing.df[, 14])  # It can take one of three levels
class(housing.df$BEDROOMS)  # BEDROOMS is an integer variable
class(housing.df[, 1])  # Total_Value is a numeric variable
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
library(dummies)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.data.frame(housing.df, names = "REMODEL" , sep = ".")
library(dummies)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
library(dummies)
# Option 2: use model.matrix() to convert all categorical variables in the data frame into a set of dummy variables.
# We must then turn the resulting data matrix back into a data frame for further work.
xtotal <- model.matrix(~ 0 + BEDROOMS + REMODEL, data = housing.df)
xtotal$BEDROOMS[1:5] # will not work because xtotal is a matrix
xtotal <- as.data.frame(xtotal)
t(t(names(xtotal)))  # check the names of the dummy variables
install.packages("dummies")
install.packages("dummy")
library(dummy)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages("dummy")
library(dummy)
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.data.frame(housing.df, names = "REMODEL" , sep = ".")
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.(housing.df, names = "REMODEL" , sep = ".")
library(dummy)
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.(housing.df, names = "REMODEL" , sep = ".")
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy(housing.df, names = "REMODEL" , sep = ".")
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy(housing.df, names = "REMODEL")
# To illustrate missing data procedures, we first convert a few entries for
# bedrooms to NA's. Then we impute these missing values using the median of the
# remaining values.
rows.to.missing <- sample(row.names(housing.df), 10)
housing.df[rows.to.missing,]$BEDROOMS <- NA
# replace the missing values using the median of the remaining values.
# use median() with na.rm = TRUE to ignore missing values when computing the median.
housing.df[rows.to.missing,]$BEDROOMS <- median(housing.df$BEDROOMS, na.rm = TRUE)
summary(housing.df$BEDROOMS)
# use set.seed() to get the same partitions when re-running the R code.
set.seed(1)
## partitioning into training (60%) and validation (40%)
# randomly sample 60% of the row IDs for training; the remaining 40% serve as
# validation
train.rows <- sample(rownames(housing.df), dim(housing.df)[1]*0.6)
# collect all the columns with training row ID into training set:
train.data <- housing.df[train.rows, ]
# assign row IDs that are not already in the training set, into validation
valid.rows <- setdiff(rownames(housing.df), train.rows)
valid.data <- housing.df[valid.rows, ]
# alternative code for validation (works only when row names are numeric):
# collect all the columns without training row ID into validation set
valid.data <- housing.df[-train.rows, ] # does not work in this case
## partitioning into training (50%), validation (30%), test (20%)
# randomly sample 50% of the row IDs for training
train.rows <- sample(rownames(housing.df), dim(housing.df)[1]*0.5)
dim(housing.df)  # find the dimension of data frame
train.rows
view(train.rows)
View(train.rows)
# collect all the columns with training row ID into training set:
train.data <- housing.df[train.rows, ]
train.data
# assign row IDs that are not already in the training set, into validation
valid.rows <- setdiff(rownames(housing.df), train.rows)
valid.data <- housing.df[valid.rows, ]
# alternative code for validation (works only when row names are numeric):
# collect all the columns without training row ID into validation set
valid.data <- housing.df[-train.rows, ] # does not work in this case
## partitioning into training (50%), validation (30%), test (20%)
# randomly sample 50% of the row IDs for training
train.rows <- sample(rownames(housing.df), dim(housing.df)[1]*0.5)
train.rpws
train.rows
train.rows
# sample 30% of the row IDs into the validation set, drawing only from records
# not already in the training set
# use setdiff() to find records not already in the training set
valid.rows <- sample(setdiff(rownames(housing.df), train.rows),
dim(housing.df)[1]*0.3)
# assign the remaining 20% row IDs serve as test
test.rows <- setdiff(rownames(housing.df), union(train.rows, valid.rows))
# create the 3 data frames by collecting all columns from the appropriate rows
train.data <- housing.df[train.rows, ]
valid.data <- housing.df[valid.rows, ]
test.data <- housing.df[test.rows, ]
reg <- lm(TOTAL_VALUE ~ .-TAX, data = housing.df, subset = train.rows) # remove variable "TAX"
tr.res <- data.frame(train.data$TOTAL_VALUE, reg$fitted.values, reg$residuals)
head(tr.res)
pred <- predict(reg, newdata = valid.data)
vl.res <- data.frame(valid.data$TOTAL_VALUE, pred, residuals =
valid.data$TOTAL_VALUE - pred)
head(vl.res)
#### Table 2.13
#installed.packages()
#install.packages("pkgconfig")
#install.packages("curl")
#install.packages("forecast")
library(forecast)
# compute accuracy on training set
accuracy(reg$fitted.values, train.data$TOTAL_VALUE)
pred <- predict(reg, newdata = valid.data)
vl.res <- data.frame(valid.data$TOTAL_VALUE, pred, residuals =
valid.data$TOTAL_VALUE - pred)
head(vl.res)
# compute accuracy on training set
accuracy(reg$fitted.values, train.data$TOTAL_VALUE)
# compute accuracy on prediction set
pred <- predict(reg, newdata = valid.data)
accuracy(pred, valid.data$TOTAL_VALUE)
setwd("D:/Education/R programming/R_Projects/BA with R/advance_Stats/AdvanceStatsHW3")
rm(list=ls())
library(readxl)
#Problem 1 (Set-1)
#Logistic Regression
hospital.df=read_excel('HW3-F24-6359.xlsx',sheet='Logistics')
head(hospital.df)
attach(hospital.df)
reg1=glm(Hospital~ Age+Health+Vaccine,family = 'binomial')
reg1
hos.coef=as.numeric(coef(reg1))
#question 1
hos.coef[1]
#question 2
hos.coef[4]
#question 3
hos.coef[3]
#question 4
hos.coef[2]
#question 5
odds58=exp(hos.coef[1]+hos.coef[2]*58+hos.coef[3]*9+hos.coef[4]*1)
ans=odds58/(1+odds58)
ans
#question 6
odds55=exp(hos.coef[1]+hos.coef[2]*55+hos.coef[3]*7+hos.coef[4]*0)
odds55
ans=odds55/(1+odds55)
ans
#question 7
odds=exp(hos.coef[2]*(51-50))
odds
#question 8
oods=exp(hos.coef[2]*40+ hos.coef[3]*(3-7)+hos.coef[4]*1)
oods
reg1
hos.coef[1]
#question 2
hos.coef[4]
#question 3
hos.coef[3]
#question 4
hos.coef[2]
#question 5
odds58=exp(hos.coef[1]+hos.coef[2]*58+hos.coef[3]*9+hos.coef[4]*1)
ans=odds58/(1+odds58)
ans
#question 6
odds55=exp(hos.coef[1]+hos.coef[2]*55+hos.coef[3]*7+hos.coef[4]*0)
odds55
ans=odds55/(1+odds55)
ans
#question 7
odds=exp(hos.coef[2]*(51-50))
odds
