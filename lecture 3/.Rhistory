print('Hello', quote=False)
print('Hello', quote=FALSE)
housing.df <- read.csv("Lecture 2/WestRoxbury.csv", header = TRUE)  # load data
housing.df <- read.csv("Lecture 2/WestRoxbury.csv", header = TRUE)  # load data
housing.df <- read.csv("WestRoxbury.csv", header = TRUE)  # load data
housing.df <- read.csv("D:/Education/R programming/R_Projects/Basics/WestRoxbury.csv", header = TRUE)  # load data
dim(housing.df)  # find the dimension of data frame
View(housing.df)  # show all the data in a new tab
# Practice showing different subsets of the data
housing.df[1:10, 1]  # show the first 10 rows of the first column only
# Practice showing different subsets of the data
housing.df[1:10, 1]  # show the first 10 rows of the first column only
housing.df[1:10, ]  # show the first 10 rows of each of the columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df$TOTAL.VALUE  # a different way to show the whole first column
length(housing.df$TOTAL.VALUE)  # find the length of the first column
summary(housing.df)  # find summary statistics for each column
housing.df[]
# random sample of 5 observations
s <- sample(row.names(housing.df), 5)
s
housing.df[s,]
names(housing.df)  # print a list of variables to the screen.
#names(housing.df) retrieves the column names of the housing.df dataframe.
#t(names(housing.df)) transposes the vector of column names, which doesn't change anything since it's already a vector.
#t(t(names(housing.df))) then transposes the transposed vector, which brings it back to the original state.
t(t(names(housing.df)))  # print the list in a useful column format
View(housing.df)  # show all the data in a new tab
dim(housing.df)  # find the dimension of data frame
# Practice showing different subsets of the data
housing.df[1:10, 1]  # show the first 10 rows of the first column only
housing.df[1:10, ]  # show the first 10 rows of each of the columns
housing.df[5, 1:10]  # show the fifth row of the first 10 columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df[5, c(1:2, 4, 8:10)]  # show the fifth row of some columns
housing.df[, 1]  # show the whole first column
housing.df$TOTAL.VALUE  # a different way to show the whole first column
housing.df$TOTAL.VALUE[1:10]  # show the first 10 rows of the first column
length(housing.df$TOTAL.VALUE)  # find the length of the first column
summary(housing.df)  # find summary statistics for each column
# random sample of 5 observations
s <- sample(row.names(housing.df), 5)
housing.df[s,]
# oversample houses with over 10 rooms
s <- sample(row.names(housing.df), 5, prob = ifelse(housing.df$ROOMS>10, 0.9, 0.01))
names(housing.df)  # print a list of variables to the screen.
#names(housing.df) retrieves the column names of the housing.df dataframe.
#t(names(housing.df)) transposes the vector of column names, which doesn't change anything since it's already a vector.
#t(t(names(housing.df))) then transposes the transposed vector, which brings it back to the original state.
t(t(names(housing.df)))  # print the list in a useful column format
colnames(housing.df)[1] <- c("TOTAL_VALUE")  # change the first column's name
housing.df$REMODEL <- as.factor(housing.df$REMODEL)
class(housing.df[ ,14]) # Same.
levels(housing.df[, 14])  # It can take one of three levels
class(housing.df$BEDROOMS)  # BEDROOMS is an integer variable
class(housing.df[, 1])  # Total_Value is a numeric variable
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
library(dummies)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.data.frame(housing.df, names = "REMODEL" , sep = ".")
library(dummies)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages(dummies)
library(dummies)
# Option 2: use model.matrix() to convert all categorical variables in the data frame into a set of dummy variables.
# We must then turn the resulting data matrix back into a data frame for further work.
xtotal <- model.matrix(~ 0 + BEDROOMS + REMODEL, data = housing.df)
xtotal$BEDROOMS[1:5] # will not work because xtotal is a matrix
xtotal <- as.data.frame(xtotal)
t(t(names(xtotal)))  # check the names of the dummy variables
install.packages("dummies")
install.packages("dummy")
library(dummy)
#### Table 2.6
# Option 1: use dummies package
# dummies_1.5.6.tar.gz - download from http://cran.nexr.com/web/packages/dummies/index.html
install.packages("dummy")
library(dummy)
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.data.frame(housing.df, names = "REMODEL" , sep = ".")
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.(housing.df, names = "REMODEL" , sep = ".")
library(dummy)
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy.(housing.df, names = "REMODEL" , sep = ".")
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy(housing.df, names = "REMODEL" , sep = ".")
##housing.df <- dummy.data.frame(housing.df, sep = ".")  Original row, does not work
housing.df <- dummy(housing.df, names = "REMODEL")
# To illustrate missing data procedures, we first convert a few entries for
# bedrooms to NA's. Then we impute these missing values using the median of the
# remaining values.
rows.to.missing <- sample(row.names(housing.df), 10)
housing.df[rows.to.missing,]$BEDROOMS <- NA
# replace the missing values using the median of the remaining values.
# use median() with na.rm = TRUE to ignore missing values when computing the median.
housing.df[rows.to.missing,]$BEDROOMS <- median(housing.df$BEDROOMS, na.rm = TRUE)
summary(housing.df$BEDROOMS)
# use set.seed() to get the same partitions when re-running the R code.
set.seed(1)
## partitioning into training (60%) and validation (40%)
# randomly sample 60% of the row IDs for training; the remaining 40% serve as
# validation
train.rows <- sample(rownames(housing.df), dim(housing.df)[1]*0.6)
# collect all the columns with training row ID into training set:
train.data <- housing.df[train.rows, ]
# assign row IDs that are not already in the training set, into validation
valid.rows <- setdiff(rownames(housing.df), train.rows)
valid.data <- housing.df[valid.rows, ]
# alternative code for validation (works only when row names are numeric):
# collect all the columns without training row ID into validation set
valid.data <- housing.df[-train.rows, ] # does not work in this case
## partitioning into training (50%), validation (30%), test (20%)
# randomly sample 50% of the row IDs for training
train.rows <- sample(rownames(housing.df), dim(housing.df)[1]*0.5)
dim(housing.df)  # find the dimension of data frame
train.rows
view(train.rows)
View(train.rows)
# collect all the columns with training row ID into training set:
train.data <- housing.df[train.rows, ]
train.data
# assign row IDs that are not already in the training set, into validation
valid.rows <- setdiff(rownames(housing.df), train.rows)
valid.data <- housing.df[valid.rows, ]
# alternative code for validation (works only when row names are numeric):
# collect all the columns without training row ID into validation set
valid.data <- housing.df[-train.rows, ] # does not work in this case
## partitioning into training (50%), validation (30%), test (20%)
# randomly sample 50% of the row IDs for training
train.rows <- sample(rownames(housing.df), dim(housing.df)[1]*0.5)
train.rpws
train.rows
train.rows
# sample 30% of the row IDs into the validation set, drawing only from records
# not already in the training set
# use setdiff() to find records not already in the training set
valid.rows <- sample(setdiff(rownames(housing.df), train.rows),
dim(housing.df)[1]*0.3)
# assign the remaining 20% row IDs serve as test
test.rows <- setdiff(rownames(housing.df), union(train.rows, valid.rows))
# create the 3 data frames by collecting all columns from the appropriate rows
train.data <- housing.df[train.rows, ]
valid.data <- housing.df[valid.rows, ]
test.data <- housing.df[test.rows, ]
reg <- lm(TOTAL_VALUE ~ .-TAX, data = housing.df, subset = train.rows) # remove variable "TAX"
tr.res <- data.frame(train.data$TOTAL_VALUE, reg$fitted.values, reg$residuals)
head(tr.res)
pred <- predict(reg, newdata = valid.data)
vl.res <- data.frame(valid.data$TOTAL_VALUE, pred, residuals =
valid.data$TOTAL_VALUE - pred)
head(vl.res)
#### Table 2.13
#installed.packages()
#install.packages("pkgconfig")
#install.packages("curl")
#install.packages("forecast")
library(forecast)
# compute accuracy on training set
accuracy(reg$fitted.values, train.data$TOTAL_VALUE)
pred <- predict(reg, newdata = valid.data)
vl.res <- data.frame(valid.data$TOTAL_VALUE, pred, residuals =
valid.data$TOTAL_VALUE - pred)
head(vl.res)
# compute accuracy on training set
accuracy(reg$fitted.values, train.data$TOTAL_VALUE)
# compute accuracy on prediction set
pred <- predict(reg, newdata = valid.data)
accuracy(pred, valid.data$TOTAL_VALUE)
install.packages('GGally','ggmap','mosaic','treemap')
install.packages('GGally','ggmap','mosaic','treemap')
amtrak.df=read.csv('Amtrak data.csv')
setwd("~/")
install.packages('GGally','ggmap','mosaic','treemap')
install.packages('GGally','ggmap','mosaic','treemap')
amtrak.df=read.csv('Amtrak data.csv')
install.packages('GGally','ggmap','mosaic','treemap')
install.packages(c("GGally", "ggmap", "mosaic", "treemap"))
amtrak.df=read.csv('Amtrak data.csv')
setwd("C:/Users/26amr/OneDrive - The University of Texas at Dallas/UTD/Fall 2024/Business ANalytics with R/lecture 3")
install.packages('GGally','ggmap','mosaic','treemap')
amtrak.df=read.csv('Amtrak data.csv')
head(amtrak.df)
#use time series analysis
library(forecast)
ridership.ts=ts(amtrak.df$Ridership, start=c(1991,1),end = c(2003,3), freq=12)
plot(ridership.ts,xlab='year',ylab='Ridership',ylim=c(1300,2300))
#Boston House data
housing.df
head(housing.df)
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS) fun=mean)
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS) fun=mean)
setwd("D:/Education/R programming/R_Projects/Basics/lecture 3")
#Boston House data
housing.df=read.csv('BostonHousing.csv')
head(housing.df)
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS) fun=mean)
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS) fun=mean)
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS) fun=mean())
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS),FUN=mean)
data.for.plot
names(data.for.plot) =c('CHAS','MEDV')
data.for.plot
barplot((data.for.plot$MEDV,names.arg=data.for.plot$CHAS)
names(data.for.plot) =c('CHAS','MEANMEDV')
barplot((data.for.plot$MEDV,names.arg=data.for.plot$CHAS)
barplot(data.for.plot$MEDV,names.arg=data.for.plot$CHAS)
#bar plot
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS),FUN=mean)
data.for.plot
names(data.for.plot) =c('CHAS','MEANMEDV')
data.for.plot
barplot(data.for.plot$MEDV,names.arg=data.for.plot$CHAS)
barplot(data.for.plot$MEDV, names.arg=data.for.plot$CHAS,xlb='x',ylab='y')
barplot(as.numeric( data.for.plot$MEDV), names.arg=data.for.plot$CHAS,xlb='x',ylab='y')
barplot(data.for.plot$MEANMEDV, names.arg=data.for.plot$CHAS,xlb='x',ylab='y')
barplot(data.for.plot$MEANMEDV, names.arg=data.for.plot$CHAS,xlb='x',ylab='y')
barplot(data.for.plot$MEANMEDV, names.arg=data.for.plot$CHAS,xlab='x',ylab='y')
data.for.plot
barplot(data.for.plot$MEANMEDV, names.arg=data.for.plot$CHAS,xlab='x',ylab='y')
plot(ridership.ts,xlab='year',ylab='Ridership',ylim=c(1300,2300))
barplot(data.for.plot$MEANMEDV, names.arg=data.for.plot$CHAS,xlab='x',ylab='y')
barplot(data.for.plot$MEANMEDV, names.arg=data.for.plot$CHAS,xlab='CHAS',ylab='Avg. MEDV')
ggplot(data.for.plot)
ggplot(data.for.plot) + geom_bar(aes(x=CHAS,y=MEANMEDV), stat='identity')
#ggplot
library(ggplot2)
ggplot(data.for.plot) + geom_bar(aes(x=CHAS,y=MEANMEDV), stat='identity')
ggplot(data.for.plot) + geom_bar(aes(x=CHAS,y=MEANMEDV), stat='identity')
#scatter plot with axes names
plot(housing.df$MEDV ~ housing.df$LSTAT, xlab='MEDV',ylab='LSTAT')
#scatter plot with axes names
plot(housing.df$MEDV, housing.df$LSTAT, xlab='MEDV',ylab='LSTAT')
ggplot(data.for.plot) + geom_bar(aes(x=CHAS,y=MEANMEDV), stat='identity')
#scatter plot with axes names
plot(housing.df$MEDV, housing.df$LSTAT, xlab='MEDV',ylab='LSTAT')
#scatter plot with axes names
plot(housing.df$MEDV ~ housing.df$LSTAT, xlab='MEDV',ylab='LSTAT')
#scatter plot with axes names
plot(housing.df$MEDV, housing.df$LSTAT, xlab='MEDV',ylab='LSTAT')
#scatter plot with axes names
plot(housing.df$MEDV~ housing.df$LSTAT, xlab='MEDV',ylab='LSTAT')
#ggplot
ggplot(housing.df) +geom_point(aes(x=LSTAT,y=MDEV),color='red',alpha=0.5)
#ggplot
ggplot(housing.df) +geom_point(aes(x=LSTAT,y=MEDV),color='red',alpha=0.5)
ridership.ts=ts(amtrak.df$Ridership, start=c(1991,1),end = c(2003,3), freq=12)
plot(ridership.ts,xlab='year',ylab='Ridership',ylim=c(1300,2300))
#bar plot
data.for.plot=aggregate(housing.df$MEDV, by=list(housing.df$CHAS),FUN=mean)
data.for.plot
names(data.for.plot) =c('CHAS','MEANMEDV')
data.for.plot
barplot(data.for.plot$MEANMEDV, names.arg=data.for.plot$CHAS,xlab='CHAS',ylab='Avg. MEDV')
#ggplot
library(ggplot2)
ggplot(data.for.plot) + geom_bar(aes(x=CHAS,y=MEANMEDV), stat='identity')
#scatter plot with axes names
plot(housing.df$MEDV~ housing.df$LSTAT, xlab='MEDV',ylab='LSTAT')
#ggplot
ggplot(housing.df) +geom_point(aes(x=LSTAT,y=MEDV),color='red',alpha=0.5)
#Barchart of CHAS vs. % CAT.MEDV
data.for.plot = aggregate(housing.df$CAT..MEDV, by=list(housing.df$CHAS),fun=mean)
#Barchart of CHAS vs. % CAT.MEDV
data.for.plot = aggregate(housing.df$CAT..MEDV, by=list(housing.df$CHAS),FUN=mean)
names(data.for.plot) = c(CHAS,MeanMEDV)
names(data.for.plot) = c('CHAS','MeanMEDV')
barplot(data.for.plot$MeanCATMEDV)
barplot(data.for.plot$MeanCATMEDV, names.arg=data.for.plot$CHAS)
barplot(data.for.plot$MeanCATMEDV*100, names.arg=data.for.plot$CHAS)
barplot(data.for.plot$MeanCATMEDV*100, names.arg=data.for.plot$CHAS)
barplot(data.for.plot$MeanCATMEDV*100, names.arg=data.for.plot$CHAS)
names(data.for.plot) = c('CHAS','MeanCATMEDV')
barplot(data.for.plot$MeanCATMEDV*100, names.arg=data.for.plot$CHAS)
barplot(data.for.plot$MeanCATMEDV*100, names.arg=data.for.plot$CHAS,xlab = 'CHAS',ylab='MeanCATMEDV')
barplot(data.for.plot$MeanCATMEDV*100, names.arg=data.for.plot$CHAS,xlab = 'CHAS',ylab='% of CATMEDV')
### Figure 3.2
# histogram fo MEDV
hist(housing.df$MEDV,xlab = 'MEDV')
### Figure 3.2
# histogram fo MEDV
hist(housing.df$MEDV,xlab = 'MEDV')
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 5)
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 5)
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 4)
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 2)
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 5)
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV ~ housing.df$CHAS,xlabs='CHAS', ylab = 'MEDV')
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV ~ housing.df$CHAS,xlabs='CHAS', ylab = 'MEDV')
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV,by= list(housing.df$CHAS),xlabs='CHAS', ylab = 'MEDV')
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV,by= list(housing.df$CHAS),xlabs='CHAS', ylab = 'MEDV')
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV~housing.df$CHAS,xlabs='CHAS', ylab = 'MEDV')
##using ggplot
ggplot(housing.df) +geom_boxplot(aes(x=as.factor(CHAS), y=MEDV) + xlab='MEDV')
##using ggplot
ggplot(housing.df) +geom_boxplot(aes(x=as.factor(CHAS), y=MEDV) + xlab='MEDV')
##using ggplot
ggplot(housing.df) +geom_boxplot(aes(x=as.factor(CHAS), y=MEDV) xlab='MEDV')
##using ggplot
ggplot(housing.df) +geom_boxplot(aes(x=as.factor(CHAS), y=MEDV)) xlab='MEDV'
##using ggplot
ggplot(housing.df) +geom_boxplot(aes(x=as.factor(CHAS), y=MEDV)) xlab=('MEDV')
##using ggplot
ggplot(housing.df) +geom_boxplot(aes(x=as.factor(CHAS), y=MEDV)) + xlab=('CHAS')
##using ggplot
ggplot(housing.df) + geom_boxplot(aes(x=as.factor(CHAS), y=MEDV)) + xlab('CHAS')
### Figure 3.2
# histogram fo MEDV
hist(housing.df$MEDV,xlab = 'MEDV')
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 5)
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 5)
### Figure 3.2
# histogram fo MEDV
hist(housing.df$MEDV,xlab = 'MEDV')
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 5)
ggplot(housing.df) + geom_histogram(aes(x=MEDV),binwidth = 5)
## boxplot of MEDV for different values of CHAS
boxplot(housing.df$MEDV~housing.df$CHAS,xlabs='CHAS', ylab = 'MEDV')
##using ggplot
ggplot(housing.df) + geom_boxplot(aes(x=as.factor(CHAS), y=MEDV)) + xlab('CHAS')
boxplot(housing.df$NOX ~ housing.df$CAT..MEDV, xlab='CAT.MEDV',ylab='NOX')
## side-by-side boxplots
# use par() to splot the plots into panels
par(mcol=c(1,4))
## side-by-side boxplots
# use par() to splot the plots into panels
par(mfcol=c(1,4))
boxplot(housing.df$NOX ~ housing.df$CAT..MEDV, xlab='CAT.MEDV',ylab='NOX')
boxplot()
boxplot(housing.df$LSTAT ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "LSTAT")
boxplot(housing.df$LSTAT ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "LSTAT")
boxplot(housing.df$INDUS ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "INDUS")
boxplot(housing.df$PTRATIO ~ housing.df$CAT..MEDV, xlab = "CAT.MEDV", ylab = "PTRATIO")
## Figure 3.4
# heatmaps
heatmap(cor(housing.df))
## Figure 3.4
# heatmaps
heatmap(cor(housing.df))
## Figure 3.4
# heatmaps
heatmap(cor(housing.df))
## Figure 3.4
# heatmaps
heatmap(cor(housing.df),Rowv = NA, Colv = NA )
heatmap.2(cor(housing.df),Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=round(cor(housing.df),2),
notecol='black', key=FALSE, trace='none', margins=c(10,10)
)
heatmap(cor(housing.df),Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=round(cor(housing.df),2),
notecol='black', key=FALSE, trace='none', margins=c(10,10)
)
## heatmap with values
library(gplots)
heatmap.2(cor(housing.df), Rowv = FALSE, Colv = FALSE, dendrogram = "none",
cellnote = round(cor(housing.df),2),
notecol = "black", key = FALSE, trace = 'none', margins = c(10,10))
heatmap.2(cor(housing.df),Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=round(cor(housing.df),2),
notecol='black', key=FALSE, trace='none', margins=c(10,10)
)
#heatmap with values
library(ggplots)
#heatmap with values
library(gplots)
heatmap.2(cor(housing.df),Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=round(cor(housing.df),2),
notecol='black', key=FALSE, trace='none', margins=c(10,10)
)
heatmap.2(cor(housing.df),Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=round(cor(housing.df),2),
notecol='black', key=FALSE, trace='none', margins=c(10,10)
)
## Figure 3.4
# heatmaps
heatmap(cor(housing.df),Rowv = NA, Colv = NA )
heatmap.2(cor(housing.df),Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=round(cor(housing.df),2),
notecol='black', key=FALSE, trace='none', margins=c(10,10)
)
## Figure 3.4
# heatmaps
heatmap(cor(housing.df),Rowv = NA, Colv = NA )
heatmap.2(cor(housing.df),Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=round(cor(housing.df),2),
notecol='black', key=FALSE, trace='none', margins=c(10,10)
)
cor(housing.df)
melted.cor.mat
library(ggplot2)
library(reshape)
cor.mat=round(cor(housing.df),2)
melted.cor.mat=melt(cor.mat)
melted.cor.mat
melted.cor.mat=melt(cor.mat)
library(ggplot2)
library(reshape)
cor.mat=round(cor(housing.df),2)
melted.cor.mat=melt(cor.mat)
class(melted.cor.mat)
melt?
class(melted.cor.mat)
?melt
cor.mat
melt(cor.mat)
melted.cor.mat=melt(cor.mat)
class(melted.cor.mat)
melted.cor.mat
ggplot(data = melted.cor.mat,mapping = aes(x1,z2,fill = value)) +geom_tile() +geom_text(aes(x1,y1,label=value))
ggplot(data = melted.cor.mat,mapping = aes(x1,z2,fill = value)) +geom_tile() +geom_text(aes(x1,y1,label=value))
ggplot(data = melted.cor.mat,mapping = aes(x1,z2,fill = value)) +geom_tile() +geom_text(aes(x1,y1,label=value))
ggplot(melted.cor.mat,aes(x1,z2,fill = value)) +geom_tile() +geom_text(aes(x1,y1,label=value))
ggplot(melted.cor.mat,aes(x=x1,x2,fill = value)) +geom_tile() +geom_text(aes(x1,y1,label=value))
melted.cor.mat
ggplot(melted.cor.mat,aes(x=x1,y=x2,fill = value)) +geom_tile() +geom_text(aes(x=x1,y=x2,label=value))
ggplot(melted.cor.mat,aes(x=X1,y=X2,fill = value)) +geom_tile() +geom_text(aes(x=x1,y=x2,label=value))
ggplot(melted.cor.mat,aes(x=X1,y=X2,fill = value)) +geom_tile() +geom_text(aes(x=X1,y=X2,label=value))
library(ggplot2)
library(reshape)
cor.mat=round(cor(housing.df),2)
melted.cor.mat=melt(cor.mat)
melted.cor.mat
ggplot(melted.cor.mat,aes(x=X1,y=X2,fill = value)) +geom_tile() +geom_text(aes(x=X1,y=X2,label=value))
