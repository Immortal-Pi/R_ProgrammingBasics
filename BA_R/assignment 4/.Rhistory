nn$weights
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE train data:',rmse(pred_valid$Actual,pred_valid$unscaled))
#Neural network with single layer and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 5)
#Neural network with single layer and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 5)
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE train data:',rmse(pred_valid$Actual,pred_valid$unscaled))
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = c(5,5))
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE train data:',rmse(pred_valid$Actual,pred_valid$unscaled))
plot(pred_valid$Actual,pred_valid$unscaled)
abline(0, 1, col = "red")
all_metrics=data.frame(Neural_Network='RMSE_1_HL_2_NODES',RMSE_TRAIN=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics
all_metrics=data.frame(Neural_Network='RMSE_1_HL_2_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics
all_metrics=data.frame(Neural_Network='RMSE_1_HIDDEN_2_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics2)
#all_metrics
all_metrics2=data.frame(Neural_Network='RMSE_1_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics2)
all_metrics
#a]
rm(list = ls())
#rm(list = ls())
toyoto.df.original=read.csv('ToyotaCorolla.csv')
#View(toyoto.df)
toyoto.df=toyoto.df.original[,c('Age_08_04', 'KM', 'Fuel_Type', 'HP', 'Automatic', 'Doors', 'Quarterly_Tax',
'Mfr_Guarantee', 'Guarantee_Period', 'Airco', 'Automatic_airco', 'CD_Player', 'Powered_Windows',
'Sport_Model','Tow_Bar','Price')]
#create dummy variables
#install.packages("fastDummies")
library(fastDummies)
toyoto.df$Fuel_Type=as.factor(toyoto.df$Fuel_Type)
toyoto.df=dummy_cols(toyoto.df,select_columns = c('Fuel_Type','Doors'),remove_first_dummy = TRUE)
#remove fuel type and doors
toyoto.df=toyoto.df[,-c(3,6)]
#split train and valid
train.index=sample(c(1:dim(toyoto.df)[1]),dim(toyoto.df)[1]*0.6)
toyoto.df.train=toyoto.df[train.index,]
toyoto.df.valid=toyoto.df[-train.index,]
View(toyoto.df.train)
#scale to the range 0-1
norm.values=preProcess(toyoto.df.train,method = 'range')
toyoto.df.train.norm = predict(norm.values, toyoto.df.train)
toyoto.df.valid.norm = predict(norm.values, toyoto.df.valid)
View(toyoto.df.train.norm)
set.seed(1)
#neural network
#install.packages('neuralnet')
library(neuralnet)
summary(toyoto.df.train.norm)
#neural network with single layer and 2 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 2)
#upscaling the Price value
min = min(toyoto.df.train$Price)
max = max(toyoto.df.train$Price)
unscale.price <- function(scaled.price){
unscaled = scaled.price*(max-min) + min
return(unscaled)
}
#weights
nn$weights
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=data.frame(Neural_Network='RMSE_1_HIDDEN_2_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
#Neural network with single hidden layer and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 5)
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
#all_metrics
all_metrics2=data.frame(Neural_Network='RMSE_1_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics2)
#Neural network with 2 hidden layers and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = c(5,5))
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics3=data.frame(Neural_Network='RMSE_2_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics3)
all_metrics
#rm(list = ls())
toyoto.df.original=read.csv('ToyotaCorolla.csv')
#View(toyoto.df)
toyoto.df=toyoto.df.original[,c('Age_08_04', 'KM', 'Fuel_Type', 'HP', 'Automatic', 'Doors', 'Quarterly_Tax',
'Mfr_Guarantee', 'Guarantee_Period', 'Airco', 'Automatic_airco', 'CD_Player', 'Powered_Windows',
'Sport_Model','Tow_Bar','Price')]
#create dummy variables
#install.packages("fastDummies")
library(fastDummies)
toyoto.df$Fuel_Type=as.factor(toyoto.df$Fuel_Type)
toyoto.df=dummy_cols(toyoto.df,select_columns = c('Fuel_Type','Doors'),remove_first_dummy = TRUE)
#remove fuel type and doors
toyoto.df=toyoto.df[,-c(3,6)]
#split train and valid
train.index=sample(c(1:dim(toyoto.df)[1]),dim(toyoto.df)[1]*0.6)
toyoto.df.train=toyoto.df[train.index,]
toyoto.df.valid=toyoto.df[-train.index,]
View(toyoto.df.train)
#scale to the range 0-1
norm.values=preProcess(toyoto.df.train,method = 'range')
toyoto.df.train.norm = predict(norm.values, toyoto.df.train)
toyoto.df.valid.norm = predict(norm.values, toyoto.df.valid)
View(toyoto.df.train.norm)
set.seed(1)
#neural network
#install.packages('neuralnet')
library(neuralnet)
summary(toyoto.df.train.norm)
#neural network with single layer and 2 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 2)
#upscaling the Price value
min = min(toyoto.df.train$Price)
max = max(toyoto.df.train$Price)
unscale.price <- function(scaled.price){
unscaled = scaled.price*(max-min) + min
return(unscaled)
}
#weights
nn$weights
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=data.frame(Neural_Network='RMSE_1_HIDDEN_2_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
#Neural network with single hidden layer and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 5)
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
#all_metrics
all_metrics2=data.frame(Neural_Network='RMSE_1_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics2)
#Neural network with 2 hidden layers and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = c(5,5))
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics3=data.frame(Neural_Network='RMSE_2_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics3)
all_metrics
#rm(list = ls())
toyoto.df.original=read.csv('ToyotaCorolla.csv')
#View(toyoto.df)
toyoto.df=toyoto.df.original[,c('Age_08_04', 'KM', 'Fuel_Type', 'HP', 'Automatic', 'Doors', 'Quarterly_Tax',
'Mfr_Guarantee', 'Guarantee_Period', 'Airco', 'Automatic_airco', 'CD_Player', 'Powered_Windows',
'Sport_Model','Tow_Bar','Price')]
#create dummy variables
#install.packages("fastDummies")
library(fastDummies)
toyoto.df$Fuel_Type=as.factor(toyoto.df$Fuel_Type)
toyoto.df=dummy_cols(toyoto.df,select_columns = c('Fuel_Type','Doors'),remove_first_dummy = TRUE)
#remove fuel type and doors
toyoto.df=toyoto.df[,-c(3,6)]
#split train and valid
train.index=sample(c(1:dim(toyoto.df)[1]),dim(toyoto.df)[1]*0.6)
toyoto.df.train=toyoto.df[train.index,]
toyoto.df.valid=toyoto.df[-train.index,]
View(toyoto.df.train)
#scale to the range 0-1
norm.values=preProcess(toyoto.df.train,method = 'range')
toyoto.df.train.norm = predict(norm.values, toyoto.df.train)
toyoto.df.valid.norm = predict(norm.values, toyoto.df.valid)
View(toyoto.df.train.norm)
set.seed(1)
#neural network
#install.packages('neuralnet')
library(neuralnet)
summary(toyoto.df.train.norm)
#neural network with single layer and 2 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 2)
#upscaling the Price value
min = min(toyoto.df.train$Price)
max = max(toyoto.df.train$Price)
unscale.price <- function(scaled.price){
unscaled = scaled.price*(max-min) + min
return(unscaled)
}
#weights
nn$weights
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=data.frame(Neural_Network='RMSE_1_HIDDEN_2_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
#Neural network with single hidden layer and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 5)
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
#all_metrics
all_metrics2=data.frame(Neural_Network='RMSE_1_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics2)
#Neural network with 2 hidden layers and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = c(5,5))
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics3=data.frame(Neural_Network='RMSE_2_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics3)
all_metrics
rm(list = ls())
toyoto.df.original=read.csv('ToyotaCorolla.csv')
#View(toyoto.df)
toyoto.df=toyoto.df.original[,c('Age_08_04', 'KM', 'Fuel_Type', 'HP', 'Automatic', 'Doors', 'Quarterly_Tax',
'Mfr_Guarantee', 'Guarantee_Period', 'Airco', 'Automatic_airco', 'CD_Player', 'Powered_Windows',
'Sport_Model','Tow_Bar','Price')]
#create dummy variables
#install.packages("fastDummies")
library(fastDummies)
toyoto.df$Fuel_Type=as.factor(toyoto.df$Fuel_Type)
toyoto.df=dummy_cols(toyoto.df,select_columns = c('Fuel_Type','Doors'),remove_first_dummy = TRUE)
#remove fuel type and doors
toyoto.df=toyoto.df[,-c(3,6)]
#split train and valid
train.index=sample(c(1:dim(toyoto.df)[1]),dim(toyoto.df)[1]*0.6)
toyoto.df.train=toyoto.df[train.index,]
toyoto.df.valid=toyoto.df[-train.index,]
View(toyoto.df.train)
#scale to the range 0-1
norm.values=preProcess(toyoto.df.train,method = 'range')
toyoto.df.train.norm = predict(norm.values, toyoto.df.train)
toyoto.df.valid.norm = predict(norm.values, toyoto.df.valid)
View(toyoto.df.train.norm)
set.seed(1)
#neural network
#install.packages('neuralnet')
library(neuralnet)
summary(toyoto.df.train.norm)
#neural network with single layer and 2 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 2)
#upscaling the Price value
min = min(toyoto.df.train$Price)
max = max(toyoto.df.train$Price)
unscale.price <- function(scaled.price){
unscaled = scaled.price*(max-min) + min
return(unscaled)
}
#weights
nn$weights
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=data.frame(Neural_Network='RMSE_1_HIDDEN_2_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
#Neural network with single hidden layer and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = 5)
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
#all_metrics
all_metrics2=data.frame(Neural_Network='RMSE_1_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics2)
#Neural network with 2 hidden layers and 5 nodes
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = c(5,5))
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics3=data.frame(Neural_Network='RMSE_2_HIDDEN_5_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics3)
all_metrics
nn=neuralnet(Price ~
Age_08_04 + KM + HP + Automatic + Quarterly_Tax +
Mfr_Guarantee + Guarantee_Period + Airco + Automatic_airco +
CD_Player + Powered_Windows + Sport_Model + Tow_Bar +
Fuel_Type_Petrol + Fuel_Type_Diesel + Doors_3 + Doors_4 + Doors_5,data = toyoto.df.train.norm,hidden = c(3,3))
#prediction train data
train.predict=compute(nn,toyoto.df.train.norm)
unscaled=unscale.price(train.predict$net.result[,1])
plot(nn,rep = 'best')
pred_train=data.frame(Actual=toyoto.df.train$Price,unscaled)
#RMSE
library(Metrics)
paste('RMSE train data:',rmse(pred_train$Actual,pred_train$unscaled))
#prediction validation data
valid.predict=compute(nn,toyoto.df.valid.norm)
unscaled=unscale.price(valid.predict$net.result[,1])
pred_valid=data.frame(Actual=toyoto.df.valid$Price,unscaled)
#RMSE
paste('RMSE valid data:',rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics3=data.frame(Neural_Network='RMSE_2_HIDDEN_3_NODES',RMSE_TRAIN=rmse(pred_train$Actual,pred_train$unscaled),RMSE_VALID=rmse(pred_valid$Actual,pred_valid$unscaled))
all_metrics=rbind(all_metrics,all_metrics3)
all_metrics
