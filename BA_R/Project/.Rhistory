#model 2 neural network
colnames(car.df.train.norm) <- gsub(" |_&_", "_", colnames(car.df.train.norm))
colnames(car.df.valid.norm) <- gsub(" |_&_", "_", colnames(car.df.valid.norm))
colnames(car.df.train.norm)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + `owner_Fourth_Above_Owner` + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm,
hidden = c(5, 5))
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + `owner_Fourth_Above_Owner` + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm,
hidden = c(2, 5),
stepmax = 1e+06)
#clear varaibles
rm(list=ls())
# Final Project car price prediction
#install.packages('dummies_1.5.6.tar.gz')
#install.packages('corrplot')
library(ggplot2)
library(stringr)
library(RColorBrewer)
library(forcats)
library('dummies')
library(fastDummies)
library(corrplot)
library(neuralnet)
#clear varaibles
rm(list=ls())
car.df=read.csv('archive/Car details v3.csv')
head(car.df)
#Data exploration and Data cleaning
car.df$name=sapply(strsplit(car.df$name," "),'[',1)
View(car.df)
#count of car brands
palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique(car.df$name))) #color
#bar plot
ggplot(data=car.df, aes(x=fct_infreq(name),fill = name))+
geom_bar(color='black',size=0.3) +
#scale_fill_manual(values=palette)+
labs(x='Car_Brand',
y='Count',
title= 'Car Brands - Bar Graph') +
theme_minimal()+
theme(axis.text.x=element_text(angle=90,hjust=1))
#coverting car name into ordinal encoding
brands=unique(car.df$name)
for (i in seq_along(brands)){
car.df$name=str_replace(car.df$name,brands[i],as.character(numbers[i]))
}
numbers <- 0:(length(brands) - 1)
for (i in seq_along(brands)){
car.df$name=str_replace(car.df$name,brands[i],as.character(numbers[i]))
}
car.df$name=as.numeric(car.df$name)
#identify blank or na columns
blank_or_na=car.df==""| is.na(car.df)
colSums(blank_or_na)
car.df$mileage[car.df$mileage=='']=NA
car.df$engine[car.df$engine=='']=NA
car.df$max_power[car.df$max_power=='']=NA
car.df$torque[car.df$torque=='']=NA
blank_or_na=is.na(car.df)
colSums(blank_or_na) #final is.na values
#data transformation
# car mileage
car.df$mileage=str_replace_all(car.df$mileage,'kmpl|km/kg','')
car.df$mileage=as.numeric(car.df$mileage)
car.df$mileage[is.na(car.df$mileage)]=mean(car.df$mileage,na.rm = TRUE)
View(car.df)
#car engine
car.df$engine=str_replace(car.df$engine,'CC','')
car.df$engine=as.numeric(car.df$engine)
car.df$engine[is.na(car.df$engine)]=mean(car.df$engine, na.rm = TRUE)
View(car.df)
#max_power
car.df$max_power=str_replace(car.df$max_power,'bhp','')
car.df$max_power=as.numeric(car.df$max_power)
car.df$max_power[is.na(car.df$max_power)]=mean(car.df$max_power, na.rm = TRUE)
#seats
car.df$seats=as.numeric(car.df$seats)
car.df$seats[is.na(car.df$seats)]=median(car.df$seats,na.rm = TRUE)
car.df=subset(car.df,select = -torque)
#fuel
ggplot(data = car.df, aes(x=fct_infreq(fuel),fill = fuel))+
scale_fill_manual(values=c('orange','blue','red','green'))+
geom_bar() +labs(x='Fuel', title = 'Fuel - Bar Graph')+
theme(axis.text.x = element_text(angle = 90,hjust=1))
#seller type
ggplot(data=car.df, aes(x=fct_infreq(seller_type), fill= seller_type))+
scale_fill_manual(values=c('green','blue','red'))+
geom_bar()+labs(x='Seller Type', title='Seller Type - Bar Graph')+
theme(axis.text.x = element_text(angle = 90,hjust=1))
#owner
ggplot(data = car.df, aes(x=fct_infreq(owner),fill=owner))+
scale_fill_manual(values=c('green','blue','red','orange','lightblue'))+
geom_bar() +labs(x='Owner', title = 'Owner - Bar Graph')+
theme(axis.text.x = element_text(angle = 90,hjust=1))
#seats
palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique(car.df$seats))) #color
ggplot(data=car.df, aes(x=fct_infreq(as.factor(seats)),fill = seats))+
geom_bar()+labs(x='Seats', title = 'Seats - Bar Graph') +
theme(axis.text.x = element_text(angle = 90,hjust=1))
#convert to dummies
View(car.df)
car.df.cat=dummy_cols(car.df,select_columns = c('owner','transmission','fuel','seller_type'), remove_selected_columns = TRUE)
View(car.df.cat)
#check for selling price distribution
ggplot(data=car.df.cat,aes(x=selling_price))+
geom_histogram(bins = 50,fill='blue',color='black')+
geom_density(alpha=0.2,fill='red')+
labs(
title = 'Selling Price - Histogram',
x='Selling Price'
)
#check the distribution for KM driven
ggplot(car.df.cat,aes(x=km_driven))+
geom_histogram(color='black',fill='blue',bins=100)+
labs(x='KM_driven',title = 'KM_Driven Histogram Graph')
#correlation
corrplot(cor(car.df.cat), type="full",
method ="color", title = "Correlation Plot",
mar=c(0,0,1,0), tl.cex= 0.8, outline= T, tl.col="black")
#Model building Linear Regression
# without normalization
set.seed(5)
#Model building Linear Regression
# without normalization
set.seed(5)
#Model building Linear Regression
# without normalization
set.seed(5)
#Model building Linear Regression
# without normalization
set.seed(5)
train_index=sample(1:nrow(car.df.cat),size=0.6*nrow(car.df.cat))
car.df.train=car.df.cat[train_index,]
car.df.valid=car.df.cat[-train_index,]
dim(car.df.train)
#Linear Regression
m1_lr=lm(selling_price~., data=car.df.train)
summary(m1_lr)
#predict selling price on test data
pred_lr_valid=predict(m1_lr,newdata = car.df.valid)
pred_lr_train=predict(m1_lr,newdata = car.df.train)
error_lr_valid=car.df.valid$selling_price -pred_lr_valid
error_lr_train=car.df.train$selling_price -pred_lr_train
RMSE_train=sqrt((mean(error_lr_train^2)))
RMSE_valid=sqrt((mean(error_lr_valid^2)))
rmse_df = data.frame(
Algorithm = c("Linear Regression"),
Train_RMSE = c(RMSE_train),
Valid_RMSE = c(RMSE_valid)
)
print(rmse_df)
#Plotting predicted vs actual values
options(scipen = 999)
plot(car.df.valid$selling_price,pred_lr_valid, main="Scatterplot", col = c("red","blue"), xlab = "Actual Selling Price", ylab = "Predicted Selling Price")
#Plotting predicted vs actual values
options(scipen = 999)
plot(car.df.valid$selling_price,pred_lr_valid, main="Scatterplot", col = c("red","blue"), xlab = "Actual Selling Price", ylab = "Predicted Selling Price")
View(car.df.valid)
#with normalization
car.df.norm=as.data.frame(sapply(car.df.cat,scale))
car.df.train.norm=car.df.norm[train_index,]
car.df.valid.norm=car.df.norm[-train_index,]
View(car.df.train.norm)
m1_lr=lm(selling_price~., data=car.df.train.norm)
summary(m1_lr)
#upscaling the Price valuewhich was normalized
mean_price = mean(car.df.cat$selling_price)
sd_price = sd(car.df.cat$selling_price)
unscale.price <- function(scaled.price) {
unscaled = scaled.price * sd_price + mean_price
return(unscaled)
}
#predict selling price on test data
pred_lr1_valid=predict(m1_lr,newdata = car.df.valid.norm)
pred_lr1_train=predict(m1_lr,newdata = car.df.train.norm)
unscaled_valid <- unscale.price(pred_lr1_valid)
unscaled_train <- unscale.price(pred_lr1_train)
error_lr_valid=car.df.valid$selling_price -unscaled_valid
error_lr_train=car.df.train$selling_price -unscaled_train
RMSE_train=sqrt((mean(error_lr_train^2)))
RMSE_valid=sqrt((mean(error_lr_valid^2)))
rmse_df = rbind(rmse_df,
data.frame(
Algorithm = c("Linear Regression normalized"),
Train_RMSE = c(RMSE_train),
Valid_RMSE = c(RMSE_valid)
))
print(rmse_df)
#Plotting predicted vs actual values
options(scipen = 999)
plot(car.df.valid$selling_price,unscaled_valid, main="Scatterplot", col = c("red","blue"), xlab = "Actual Selling Price", ylab = "Predicted Selling Price")
colnames(car.df.train.norm)
car.df=read.csv('archive/Car details v3.csv')
head(car.df)
# Final Project car price prediction
#install.packages('dummies_1.5.6.tar.gz')
#install.packages('corrplot')
library(ggplot2)
library(stringr)
library(RColorBrewer)
library(forcats)
library('dummies')
library(fastDummies)
library(corrplot)
library(neuralnet)
#clear varaibles
rm(list=ls())
car.df=read.csv('archive/Car details v3.csv')
head(car.df)
#Data exploration and Data cleaning
car.df$name=sapply(strsplit(car.df$name," "),'[',1)
View(car.df)
#count of car brands
palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique(car.df$name))) #color
#bar plot
ggplot(data=car.df, aes(x=fct_infreq(name),fill = name))+
geom_bar(color='black',size=0.3) +
#scale_fill_manual(values=palette)+
labs(x='Car_Brand',
y='Count',
title= 'Car Brands - Bar Graph') +
theme_minimal()+
theme(axis.text.x=element_text(angle=90,hjust=1))
#  panel.grid.major = element_line(color = "gray", linetype = "dashed"))
#coverting car name into ordinal encoding
brands=unique(car.df$name)
numbers <- 0:(length(brands) - 1)
for (i in seq_along(brands)){
car.df$name=str_replace(car.df$name,brands[i],as.character(numbers[i]))
}
car.df$name=as.numeric(car.df$name)
#View(car.df)
#Data cleaning - resolving blank values with average values
#identify blank or na columns
blank_or_na=car.df==""| is.na(car.df)
colSums(blank_or_na)
car.df$mileage[car.df$mileage=='']=NA
car.df$engine[car.df$engine=='']=NA
car.df$max_power[car.df$max_power=='']=NA
car.df$torque[car.df$torque=='']=NA
blank_or_na=is.na(car.df)
colSums(blank_or_na) #final is.na values
#data transformation
# car mileage
car.df$mileage=str_replace_all(car.df$mileage,'kmpl|km/kg','')
car.df$mileage=as.numeric(car.df$mileage)
car.df$mileage[is.na(car.df$mileage)]=mean(car.df$mileage,na.rm = TRUE)
View(car.df)
#car engine
car.df$engine=str_replace(car.df$engine,'CC','')
car.df$engine=as.numeric(car.df$engine)
car.df$engine[is.na(car.df$engine)]=mean(car.df$engine, na.rm = TRUE)
View(car.df)
#max_power
car.df$max_power=str_replace(car.df$max_power,'bhp','')
car.df$max_power=as.numeric(car.df$max_power)
car.df$max_power[is.na(car.df$max_power)]=mean(car.df$max_power, na.rm = TRUE)
#View(car.df)
#seats
car.df$seats=as.numeric(car.df$seats)
car.df$seats[is.na(car.df$seats)]=median(car.df$seats,na.rm = TRUE)
car.df=subset(car.df,select = -torque)
#plotting categorical values - check
#fuel
ggplot(data = car.df, aes(x=fct_infreq(fuel),fill = fuel))+
scale_fill_manual(values=c('orange','blue','red','green'))+
geom_bar() +labs(x='Fuel', title = 'Fuel - Bar Graph')+
theme(axis.text.x = element_text(angle = 90,hjust=1))
#seller type
ggplot(data=car.df, aes(x=fct_infreq(seller_type), fill= seller_type))+
scale_fill_manual(values=c('green','blue','red'))+
geom_bar()+labs(x='Seller Type', title='Seller Type - Bar Graph')+
theme(axis.text.x = element_text(angle = 90,hjust=1))
#owner
ggplot(data = car.df, aes(x=fct_infreq(owner),fill=owner))+
scale_fill_manual(values=c('green','blue','red','orange','lightblue'))+
geom_bar() +labs(x='Owner', title = 'Owner - Bar Graph')+
theme(axis.text.x = element_text(angle = 90,hjust=1))
#seats
palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique(car.df$seats))) #color
ggplot(data=car.df, aes(x=fct_infreq(as.factor(seats)),fill = seats))+
geom_bar()+labs(x='Seats', title = 'Seats - Bar Graph') +
theme(axis.text.x = element_text(angle = 90,hjust=1))
#convert to dummies
View(car.df)
car.df.cat=dummy_cols(car.df,select_columns = c('owner','transmission','fuel','seller_type'), remove_selected_columns = TRUE)
View(car.df.cat)
#check for selling price distribution
ggplot(data=car.df.cat,aes(x=selling_price))+
geom_histogram(bins = 50,fill='blue',color='black')+
geom_density(alpha=0.2,fill='red')+
labs(
title = 'Selling Price - Histogram',
x='Selling Price'
)
#scale_x_continuous(trans = 'log10')
#check the distribution for KM driven
ggplot(car.df.cat,aes(x=km_driven))+
geom_histogram(color='black',fill='blue',bins=100)+
labs(x='KM_driven',title = 'KM_Driven Histogram Graph')
#scale_x_continuous(trans = 'log10')
#correlation
corrplot(cor(car.df.cat), type="full",
method ="color", title = "Correlation Plot",
mar=c(0,0,1,0), tl.cex= 0.8, outline= T, tl.col="black")
#needs to check if we categorical values or nominal values are better
# remove seat 14 as it has no correlation with any other variables
#car.df.cat=subset(car.df.cat,select = -seats_14)
#Model building Linear Regression
# without normalization
set.seed(5)
train_index=sample(1:nrow(car.df.cat),size=0.6*nrow(car.df.cat))
car.df.train=car.df.cat[train_index,]
car.df.valid=car.df.cat[-train_index,]
dim(car.df.train)
#Linear Regression
m1_lr=lm(selling_price~., data=car.df.train)
summary(m1_lr)
#plot(m1_lr)
#predict selling price on test data
pred_lr_valid=predict(m1_lr,newdata = car.df.valid)
pred_lr_train=predict(m1_lr,newdata = car.df.train)
error_lr_valid=car.df.valid$selling_price -pred_lr_valid
error_lr_train=car.df.train$selling_price -pred_lr_train
RMSE_train=sqrt((mean(error_lr_train^2)))
RMSE_valid=sqrt((mean(error_lr_valid^2)))
rmse_df = data.frame(
Algorithm = c("Linear Regression"),
Train_RMSE = c(RMSE_train),
Valid_RMSE = c(RMSE_valid)
)
print(rmse_df)
#Plotting predicted vs actual values
options(scipen = 999)
plot(car.df.valid$selling_price,pred_lr_valid, main="Scatterplot", col = c("red","blue"), xlab = "Actual Selling Price", ylab = "Predicted Selling Price")
View(car.df.valid)
#with normalization
car.df.norm=as.data.frame(sapply(car.df.cat,scale))
car.df.train.norm=car.df.norm[train_index,]
car.df.valid.norm=car.df.norm[-train_index,]
View(car.df.train.norm)
m1_lr=lm(selling_price~., data=car.df.train.norm)
summary(m1_lr)
#plot(m1_lr)
#upscaling the Price valuewhich was normalized
mean_price = mean(car.df.cat$selling_price)
sd_price = sd(car.df.cat$selling_price)
unscale.price <- function(scaled.price) {
unscaled = scaled.price * sd_price + mean_price
return(unscaled)
}
#predict selling price on test data
pred_lr1_valid=predict(m1_lr,newdata = car.df.valid.norm)
pred_lr1_train=predict(m1_lr,newdata = car.df.train.norm)
unscaled_valid <- unscale.price(pred_lr1_valid)
unscaled_train <- unscale.price(pred_lr1_train)
error_lr_valid=car.df.valid$selling_price -unscaled_valid
error_lr_train=car.df.train$selling_price -unscaled_train
RMSE_train=sqrt((mean(error_lr_train^2)))
RMSE_valid=sqrt((mean(error_lr_valid^2)))
rmse_df = rbind(rmse_df,
data.frame(
Algorithm = c("Linear Regression normalized"),
Train_RMSE = c(RMSE_train),
Valid_RMSE = c(RMSE_valid)
))
print(rmse_df)
#Plotting predicted vs actual values
options(scipen = 999)
plot(car.df.valid$selling_price,unscaled_valid, main="Scatterplot", col = c("red","blue"), xlab = "Actual Selling Price", ylab = "Predicted Selling Price")
#model 2 neural network
colnames(car.df.train.norm) <- gsub(" |_&_", "_", colnames(car.df.train.norm))
colnames(car.df.valid.norm) <- gsub(" |_&_", "_", colnames(car.df.valid.norm))
summary(car.df.train.norm)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + `owner_Fourth_Above_Owner` + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm,
hidden = c(2, 5),
stepmax = 1e+06)
colnames(car.df.train.norm)
#model 2 neural network
colnames(car.df.train.norm) <- gsub(" |_&_", "_", colnames(car.df.train.norm))
colnames(car.df.valid.norm) <- gsub(" |_&_", "_", colnames(car.df.valid.norm))
summary(car.df.train.norm)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + `owner_Fourth_Above_Owner` + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm,
hidden = c(2, 5),
stepmax = 1e+06)
plot(nn)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm,
hidden = 5,
stepmax = 1e+06)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm[1000:],
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm[1000,],
hidden = 5,
stepmax = 1e+06)
plot(nn)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm[3000,],
hidden = 5,
stepmax = 1e+06)
plot(nn)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm,,
hidden = 5,
stepmax = 1e+06)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm[4000,],
hidden = 5,
stepmax = 1e+06)
plot(nn)
dim(car.df.train.norm)
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm[4876,],
hidden = 5,
stepmax = 1e+06)
plot(nn)
plot(nn,rep = 'best')
nn = neuralnet(selling_price ~
name + year + km_driven + mileage + engine + max_power +
seats +
owner_First_Owner + owner_Fourth_Above_Owner + owner_Second_Owner +
owner_Test_Drive_Car + owner_Third_Owner +
transmission_Automatic + transmission_Manual +
fuel_CNG + fuel_Diesel + fuel_LPG + fuel_Petrol +
seller_type_Dealer + seller_type_Individual + seller_type_Trustmark_Dealer,
data = car.df.train.norm,
hidden = 5,
stepmax = 1e+06)
plot(nn,rep = 'best')
colnames(car.df.train.norm)
dim(car.df.train.norm)
